{"version":3,"sources":["img/LogoFPUNA.jpeg","funciones.js","clases.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["crearMatriz","n","Array","fill","map","clonarMatriz","matriz","JSON","parse","stringify","enteroAleatorio","min","max","Math","floor","random","rutaString","acc","valor","Punto","x","y","this","a","b","c","d","ccw","TSP","length","console","assert","p","i","dist","j","sqrt","puntos","distancias","ruta","unv","splice","r","intersect","slice","concat","reverse","actual","visitados","longitud","Infinity","backtrack","nodoActual","nodosVisitados","longitud_actual","evaluarRuta","algolasvegas","App","useState","algoritmo","setAlgoritmo","tamanho","setTamanho","setMatriz","setRuta","tiempo","setTiempo","costo","setCosto","setearCosto","fila","columna","event","nuevoCosto","parseInt","target","value","isNaN","previous","copia","Container","fluid","className","Row","Col","sm","Image","src","logoPoli","alt","Form","Group","Label","Select","onChange","Control","type","nuevaMatriz","Button","variant","onClick","transpuesta","_","colIndex","row","hallarTranspuesta","tsp","t0","performance","now","backtracking","lasvegas","avaro","optimizar","t1","log","A","B","calcularCosto","disabled","style","margin","Number","toFixed","readOnly","as","reduce","Table","striped","bordered","hover","indexFila","indexColumna","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","response","counterSlice","createSlice","name","initialState","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7aa84f08.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/LogoFPUNA.13d083ff.jpeg\";","\nexport const crearMatriz = (n) => {\n    return Array(n).fill().map( () => Array(2).fill(0))\n}\n\nexport const clonarMatriz = (matriz) => {\n    return JSON.parse(JSON.stringify(matriz))\n}\n\nexport const hallarTranspuesta = (matriz) => {\n    return matriz[0].map((_, colIndex) => matriz.map(row => row[colIndex]))\n}\n\nexport const enteroAleatorio = (min, max) => {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const aleatorizarMatriz = (min, max) => matriz => {\n    const copia = clonarMatriz(matriz)\n    for (let i=0; i < matriz.length; i++) {\n        copia[i][0] = enteroAleatorio(min, max);\n        copia[i][1] = enteroAleatorio(min, max);\n    }\n    return copia;\n}\n\nexport const calcularCosto = (matriz, ruta) => {\n    let costo = 0;\n    for (let i=0; i < ruta.length - 1; i++) {\n        const A = matriz[i];\n        const B = matriz[i+1];\n        const dist = (A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2;\n        costo = costo + Math.sqrt(dist);\n    }\n    // Agregar la vuelta\n    const A = matriz[0];\n    const B = matriz[ruta.length - 1];\n    const dist = (A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2;\n    costo = costo + Math.sqrt(dist);\n\n    return costo;\n}\n\nexport const rutaString = (acc, valor) => `${acc} -> ${valor}`","\nclass Punto {\n    constructor (x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    // determina si tres puntos estan en sentido antihorario\n    static ccw (a, b, c) {\n        return (c.y-a.y)*(b.x-a.x) > (b.y-a.y)*(c.x-a.x);\n    }\n\n    // determina si los segmentos ab y cd se intersectan\n    static intersect (a, b, c, d) {\n        return this.ccw(a,c,d) !== this.ccw(b,c,d) && this.ccw(a,b,c) !== this.ccw(a,b,d);\n    }\n}\n\nexport class TSP {\n    // Procesa dos listas de puntos\n    constructor (x, y) {\n        var n = x.length;\n        console.assert(x.length === y.length, \"Error: x.length != y.length\");\n\n        // almacena las coordenadas de cada punto\n        var p = Array(n);\n        for (var i = 0; i < n; i++) {\n            p[i] = new Punto(x[i], y[i]);\n        }\n\n        // calcula la matriz de distancias\n        var dist = Array(n);\n        for (let i = 0; i < n; i++) {\n            dist[i] = Array(n);\n            for (var j = 0; j < n; j++) {\n                dist[i][j] = Math.sqrt((p[i].x - p[j].x) ** 2 + (p[i].y - p[j].y) ** 2);\n            }\n        }\n\n        this.n = n;\n        this.puntos = p;\n        this.distancias = dist;\n    }\n\n    avaro () {\n        var n = this.n;\n        var dist = this.distancias;\n\n        // comienza en el nodo 0\n        var ruta = Array(n);\n        ruta[0] = 0;\n        var last = 0;\n\n        // nodos sin visitar\n        var unv = Array(n-1);\n        for (let i = 1; i < n; i++) {\n            unv[i - 1] = i;\n        }\n\n        // por cada nodo restante\n        for (let i = 1; i < n; i++) {\n            // halla el nodo mas cercano\n            var min = 0;\n            for (var j = 1; j < unv.length; j++) {\n                if (dist[last][unv[j]] < dist[last][unv[min]]) {\n                    min = j;\n                }\n            }\n\n            // agrega el nodo a la ruta\n            ruta[i] = unv[min];\n            unv.splice(min, 1);\n        }\n        this.ruta = ruta;\n    }\n\n    optimizar () {\n        var n = this.n;\n        var r = this.ruta;\n        var p = this.puntos;\n\n        // por cada par de aristas en la ruta\n        for (var a = 0; a < n - 2; a++) {\n            var b = a + 1;\n            for (var c = b + 1; c < n; c++) {\n                var d = c + 1;\n\n                // si se intersectan reconecta las aristas\n                if (Punto.intersect(p[r[a]], p[r[b]], p[r[c]], p[r[d % n]])) {\n                    r = r.slice(0, b).concat(r.slice(b, d).reverse()).concat(r.slice(d));\n                }\n            }\n        }\n        \n        this.ruta = r;\n    }\n\n    backtracking () {\n        // ruta actual\n        this.actual = Array(this.n);\n\n        // nodos visitados\n        this.visitados = Array(this.n).fill(false);\n\n        // longitud de la ruta\n        this.longitud = Infinity;\n\n        // comienza con el primer nodo\n        this.backtrack(0, 0);\n\n        delete this.actual;\n        delete this.visitados;\n        delete this.longitud;\n\n    }\n\n    backtrack (nodoActual, nodosVisitados) {\n        //console.log(\"visitando: \", nodoActual);\n        // visita el nodo actual\n        this.actual[nodosVisitados] = nodoActual;\n        this.visitados[nodoActual] = true;\n        if (nodosVisitados+1 === this.n) {\n            // evalua la ruta actual\n            var longitud_actual = this.evaluarRuta(this.actual);\n            if (longitud_actual < this.longitud) {\n                this.ruta = this.actual.slice();\n                this.longitud = longitud_actual;\n\n            }\n        } else {\n            // visita los otros nodos\n            for (var i = 0; i < this.n; i++) {\n                if (!this.visitados[i]) {\n                    this.backtrack(i, nodosVisitados+1);\n                }\n            }\n        }\n\n        // desvisita el nodo actual\n        this.visitados[nodoActual] = false;\n    }\n\t\n\tlasvegas () {\n        // ruta actual\n        this.actual = Array(this.n);\n\n        // nodos visitados\n        this.visitados = Array(this.n).fill(false);\n\n        // longitud de la ruta\n        this.longitud = Infinity;\n\n        // comienza con un nodo aleatorio\n        this.algolasvegas(Math.floor(Math.random() * this.n), 0);\n\n        delete this.actual;\n        delete this.visitados;\n        delete this.longitud;\n\n    }\n\t\n\talgolasvegas (nodoActual, nodosVisitados) {\n        var i = Math.floor(Math.random() * this.n);\n\t\t\n\t\tthis.actual[nodosVisitados] = nodoActual;\n        this.visitados[nodoActual] = true;\n\t\t\n\t\t// recorrido escogiendo nodos aleatorios\n\t\twhile (nodosVisitados + 1 !== this.n){\n\t\t\n\t\t\tif (!this.visitados[i]) {\n\t\t\t\tnodosVisitados = nodosVisitados + 1;\n\t\t\t\t\n\t\t\t\tthis.actual[nodosVisitados] = i;\n\t\t\t\tthis.visitados[i] = true;\n\t\t\t}\n\t\t\n\t\t\ti = Math.floor(Math.random() * this.n)\n\t\t}\n\t\t\n        // evalua la ruta actual\n        var longitud_actual = this.evaluarRuta(this.actual);\n\t\tthis.ruta = this.actual.slice();\n        this.longitud = longitud_actual;\n    }\n\n    evaluarRuta (actual) {\n        var longitud = 0;\n        for (var i = 1; i < this.n; i++) {\n            longitud = longitud + this.distancias[actual[i-1]][actual[i]];\n        }\n        longitud = longitud + this.distancias[actual[0]][actual[this.n-1]];\n        return longitud;\n    }\n}","import React, {useState} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport logoPoli from \"./img/LogoFPUNA.jpeg\"\nimport {Button, Col, Container, Form, Image, Row, Table} from \"react-bootstrap\";\nimport {aleatorizarMatriz, calcularCosto, clonarMatriz, crearMatriz, hallarTranspuesta, rutaString} from \"./funciones\";\nimport {TSP} from \"./clases\";\n\nfunction App() {\n    const [algoritmo, setAlgoritmo] = useState(0);\n    const [tamanho, setTamanho] = useState(4);\n    const [matriz, setMatriz] = useState(crearMatriz(4));\n    const [ruta, setRuta] = useState([]);\n    const [tiempo, setTiempo] = useState(0.0);\n    const [costo, setCosto] = useState(0.0);\n\n    const setearTamanho = (event) => {\n        const n = parseInt(event.target.value);\n        setTamanho(n);\n\n        if (!isNaN(n)) {\n            const nuevaMatriz = crearMatriz(n);\n            setMatriz(nuevaMatriz);\n        }\n    }\n\n    const setearCosto = (fila, columna) => (event) => {\n        const nuevoCosto = parseInt(event.target.value)\n\n        if (!isNaN(nuevoCosto)) {\n            setMatriz( previous => {\n                const copia = clonarMatriz(previous);\n                copia[fila][columna] = nuevoCosto;\n                return copia;\n            });\n        }\n    }\n\n    const ejecutarAlgoritmo = () => {\n        const transpuesta = hallarTranspuesta(matriz);\n        const tsp = new TSP(transpuesta[0], transpuesta[1]);\n        let t0 = performance.now();\n        switch (algoritmo) {\n            case '1':\n                // Backtracking\n                tsp.backtracking();\n                break;\n            case '2':\n                // Algoritmo de las vegas\n\t\t\t\ttsp.lasvegas();\n                break;\n            case '3':\n                // Avaro + 2-opt local\n                tsp.avaro();\n                tsp.optimizar();\n                break;\n            default:\n                break;\n        }\n        let t1 = performance.now();\n        console.log(`Tiempo ${t1-t0} ms`)\n        setRuta(tsp.ruta);\n        setCosto(calcularCosto(matriz, tsp.ruta));\n        setTiempo(t1-t0);\n    }\n\n    const aleatorizar = () => {\n        setMatriz(aleatorizarMatriz(-10, 10));\n    }\n\n    return (\n      <>\n        <Container fluid className=\"m-0\">\n            <Row>\n                <Col sm={6}>\n                    <Image src={logoPoli} alt=\"FPUNA\" className=\"logo\"/>\n                    <h1>Traveling Salesman Problem</h1>\n                    <h2>Integrantes</h2>\n                    <li>Mateo Fidabel</li>\n                    <li>Santiago Acevedo</li>\n                    <li>Angel Ferreira</li>\n                    <li>Isaac Amarilla</li>\n                </Col>\n                <Col sm={6}>\n                    <Form className=\"mt-5\">\n                        <Form.Group>\n                            <Form.Label>Algoritmo</Form.Label>\n                            <Form.Select value={algoritmo}\n                                         onChange={event => {setAlgoritmo(event.target.value)}}>\n                                <option value={0}>Seleccione el algoritmo</option>\n                                <option value={1}>Backtracking</option>\n                                <option value={2}>Algoritmo de las vegas</option>\n                                <option value={3}>Avaro + 2-opt local</option>\n                            </Form.Select>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group>\n                            <Form.Label>Valor de N</Form.Label>\n                            <Form.Control type=\"number\"\n                                          value={tamanho}\n                                          onChange={setearTamanho}/>\n                        </Form.Group>\n                        <br/>\n                        <Row>\n                            <Col>\n                                <Form.Group>\n                                    <Button variant=\"primary\"\n                                            onClick={ejecutarAlgoritmo}\n                                            disabled={algoritmo === 0}>Calcular</Button>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group>\n                                    <Button variant=\"secondary\"\n                                            onClick={aleatorizar}>Aleatorio</Button>\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                    </Form>\n                </Col>\n            </Row>\n            <Row style={{margin: 16}}>\n                <Col sm={6}>\n                    <Form>\n                        <Form.Group>\n                            <Form.Label>Tiempo de Ejecución</Form.Label>\n                            <Form.Control value={`${Number(tiempo.toFixed(2))} ms`} readOnly/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group>\n                            <Form.Label>Costo del camino</Form.Label>\n                            <Form.Control value={ruta.length === tamanho\n                                ? costo\n                                : \"0\"} readOnly/>\n                        </Form.Group>\n                    </Form>\n                </Col>\n                <Col>\n                    <Form.Group>\n                        <Form.Label>Ruta</Form.Label>\n                        {ruta.length === tamanho\n                            ? <Form.Control as=\"textarea\" value={ruta.reduce(rutaString)} readOnly/>\n                            : <Form.Control value=\"No disponible\" readOnly />\n                        }\n                    </Form.Group>\n                </Col>\n            </Row>\n            <Row style={{margin: 8}}>\n                <h3>Coordenadas</h3>\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>Ciudad / Coordenada </th>\n                            <th>Coordenada X</th>\n                            <th>Coordenada Y</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    {\n                        matriz.map( (fila, indexFila = 1) => {\n                            return (\n                                <tr key={indexFila}>\n                                    <td>M{indexFila}</td>\n                                    {\n                                        fila.map( (columna, indexColumna = 1) => {\n                                            return (\n                                                <td key={indexFila + \" \" + indexColumna}>\n                                                    <Form.Control type=\"number\"\n                                                                  value={matriz[indexFila][indexColumna]}\n                                                                  onChange={setearCosto(indexFila, indexColumna)}\n                                                    />\n                                                </td>\n                                            )\n                                        })\n                                    }\n                                </tr>\n                            )\n                        })\n                    }\n                    </tbody>\n                </Table>\n            </Row>\n        </Container>\n      </>\n    );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}